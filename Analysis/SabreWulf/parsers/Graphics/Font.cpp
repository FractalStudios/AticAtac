#include "stdafx.h"
#include "Font.h"
#include "Main.h"

static  BYTE    chars [] =
{
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x10, 0x10, 0x10, 0x10, 0x00, 0x10, 0x00,
0x00, 0x24, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x24, 0x7E, 0x24, 0x24, 0x7E, 0x24, 0x00,
0x00, 0x08, 0x3E, 0x28, 0x3E, 0x0A, 0x3E, 0x08,
0x00, 0x62, 0x64, 0x08, 0x10, 0x26, 0x46, 0x00,
0x00, 0x10, 0x28, 0x10, 0x2A, 0x44, 0x3A, 0x00,
0x00, 0x08, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x04, 0x08, 0x08, 0x08, 0x08, 0x04, 0x00,
0x00, 0x20, 0x10, 0x10, 0x10, 0x10, 0x20, 0x00,
0x00, 0x00, 0x14, 0x08, 0x3E, 0x08, 0x14, 0x00,
0x00, 0x00, 0x08, 0x08, 0x3E, 0x08, 0x08, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x10,
0x00, 0x00, 0x00, 0x00, 0x3E, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00,
0x00, 0x00, 0x02, 0x04, 0x08, 0x10, 0x20, 0x00,
0x00, 0x3C, 0x46, 0x4A, 0x52, 0x62, 0x3C, 0x00,
0x00, 0x18, 0x28, 0x08, 0x08, 0x08, 0x3E, 0x00,
0x00, 0x3C, 0x42, 0x02, 0x3C, 0x40, 0x7E, 0x00,
0x00, 0x3C, 0x42, 0x0C, 0x02, 0x42, 0x3C, 0x00,
0x00, 0x08, 0x18, 0x28, 0x48, 0x7E, 0x08, 0x00,
0x00, 0x7E, 0x40, 0x7C, 0x02, 0x42, 0x3C, 0x00,
0x00, 0x3C, 0x40, 0x7C, 0x42, 0x42, 0x3C, 0x00,
0x00, 0x7E, 0x02, 0x04, 0x08, 0x10, 0x10, 0x00,
0x00, 0x3C, 0x42, 0x3C, 0x42, 0x42, 0x3C, 0x00,
0x00, 0x3C, 0x42, 0x42, 0x3E, 0x02, 0x3C, 0x00,
0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x10, 0x00,
0x00, 0x00, 0x10, 0x00, 0x00, 0x10, 0x10, 0x20,
0x00, 0x00, 0x04, 0x08, 0x10, 0x08, 0x04, 0x00,
0x00, 0x00, 0x00, 0x3E, 0x00, 0x3E, 0x00, 0x00,
0x00, 0x00, 0x10, 0x08, 0x04, 0x08, 0x10, 0x00,
0x00, 0x3C, 0x42, 0x04, 0x08, 0x00, 0x08, 0x00,
0x00, 0x3C, 0x4A, 0x56, 0x5E, 0x40, 0x3C, 0x00,
0x00, 0x3C, 0x42, 0x42, 0x7E, 0x42, 0x42, 0x00,
0x00, 0x7C, 0x42, 0x7C, 0x42, 0x42, 0x7C, 0x00,
0x00, 0x3C, 0x42, 0x40, 0x40, 0x42, 0x3C, 0x00,
0x00, 0x78, 0x44, 0x42, 0x42, 0x44, 0x78, 0x00,
0x00, 0x7E, 0x40, 0x7C, 0x40, 0x40, 0x7E, 0x00,
0x00, 0x7E, 0x40, 0x7C, 0x40, 0x40, 0x40, 0x00,
0x00, 0x3C, 0x42, 0x40, 0x4E, 0x42, 0x3C, 0x00,
0x00, 0x42, 0x42, 0x7E, 0x42, 0x42, 0x42, 0x00,
0x00, 0x3E, 0x08, 0x08, 0x08, 0x08, 0x3E, 0x00,
0x00, 0x02, 0x02, 0x02, 0x42, 0x42, 0x3C, 0x00,
0x00, 0x44, 0x48, 0x70, 0x48, 0x44, 0x42, 0x00,
0x00, 0x40, 0x40, 0x40, 0x40, 0x40, 0x7E, 0x00,
0x00, 0x42, 0x66, 0x5A, 0x42, 0x42, 0x42, 0x00,
0x00, 0x42, 0x62, 0x52, 0x4A, 0x46, 0x42, 0x00,
0x00, 0x3C, 0x42, 0x42, 0x42, 0x42, 0x3C, 0x00,
0x00, 0x7C, 0x42, 0x42, 0x7C, 0x40, 0x40, 0x00,
0x00, 0x3C, 0x42, 0x42, 0x52, 0x4A, 0x3C, 0x00,
0x00, 0x7C, 0x42, 0x42, 0x7C, 0x44, 0x42, 0x00,
0x00, 0x3C, 0x40, 0x3C, 0x02, 0x42, 0x3C, 0x00,
0x00, 0xFE, 0x10, 0x10, 0x10, 0x10, 0x10, 0x00,
0x00, 0x42, 0x42, 0x42, 0x42, 0x42, 0x3C, 0x00,
0x00, 0x42, 0x42, 0x42, 0x42, 0x24, 0x18, 0x00,
0x00, 0x42, 0x42, 0x42, 0x42, 0x5A, 0x24, 0x00,
0x00, 0x42, 0x24, 0x18, 0x18, 0x24, 0x42, 0x00,
0x00, 0x82, 0x44, 0x28, 0x10, 0x10, 0x10, 0x00,
0x00, 0x7E, 0x04, 0x08, 0x10, 0x20, 0x7E, 0x00,
0x00, 0x0E, 0x08, 0x08, 0x08, 0x08, 0x0E, 0x00,
0x00, 0x00, 0x40, 0x20, 0x10, 0x08, 0x04, 0x00,
0x00, 0x70, 0x10, 0x10, 0x10, 0x10, 0x70, 0x00,
0x00, 0x10, 0x38, 0x54, 0x10, 0x10, 0x10, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF,
0x00, 0x1C, 0x22, 0x78, 0x20, 0x20, 0x7E, 0x00,
0x00, 0x00, 0x38, 0x04, 0x3C, 0x44, 0x3C, 0x00,
0x00, 0x20, 0x20, 0x3C, 0x22, 0x22, 0x3C, 0x00,
0x00, 0x00, 0x1C, 0x20, 0x20, 0x20, 0x1C, 0x00,
0x00, 0x04, 0x04, 0x3C, 0x44, 0x44, 0x3C, 0x00,
0x00, 0x00, 0x38, 0x44, 0x78, 0x40, 0x3C, 0x00,
0x00, 0x0C, 0x10, 0x18, 0x10, 0x10, 0x10, 0x00,
0x00, 0x00, 0x3C, 0x44, 0x44, 0x3C, 0x04, 0x38,
0x00, 0x40, 0x40, 0x78, 0x44, 0x44, 0x44, 0x00,
0x00, 0x10, 0x00, 0x30, 0x10, 0x10, 0x38, 0x00,
0x00, 0x04, 0x00, 0x04, 0x04, 0x04, 0x24, 0x18,
0x00, 0x20, 0x28, 0x30, 0x30, 0x28, 0x24, 0x00,
0x00, 0x10, 0x10, 0x10, 0x10, 0x10, 0x0C, 0x00,
0x00, 0x00, 0x68, 0x54, 0x54, 0x54, 0x54, 0x00,
0x00, 0x00, 0x78, 0x44, 0x44, 0x44, 0x44, 0x00,
0x00, 0x00, 0x38, 0x44, 0x44, 0x44, 0x38, 0x00,
0x00, 0x00, 0x78, 0x44, 0x44, 0x78, 0x40, 0x40,
0x00, 0x00, 0x3C, 0x44, 0x44, 0x3C, 0x04, 0x06,
0x00, 0x00, 0x1C, 0x20, 0x20, 0x20, 0x20, 0x00,
0x00, 0x00, 0x38, 0x40, 0x38, 0x04, 0x78, 0x00,
0x00, 0x10, 0x38, 0x10, 0x10, 0x10, 0x0C, 0x00,
0x00, 0x00, 0x44, 0x44, 0x44, 0x44, 0x38, 0x00,
0x00, 0x00, 0x44, 0x44, 0x28, 0x28, 0x10, 0x00,
0x00, 0x00, 0x44, 0x54, 0x54, 0x54, 0x28, 0x00,
0x00, 0x00, 0x44, 0x28, 0x10, 0x28, 0x44, 0x00,
0x00, 0x00, 0x44, 0x44, 0x44, 0x3C, 0x04, 0x38,
0x00, 0x00, 0x7C, 0x08, 0x10, 0x20, 0x7C, 0x00,
0x00, 0x0E, 0x08, 0x30, 0x08, 0x08, 0x0E, 0x00,
0x00, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x00,
0x00, 0x70, 0x10, 0x0C, 0x10, 0x10, 0x70, 0x00,
0x00, 0x14, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00,
0x3C, 0x42, 0x99, 0xA1, 0xA1, 0x99, 0x42, 0x3C,

0x18, 0x3c, 0x66, 0x66, 0x7e, 0x66, 0x66, 0x00,
0xfc, 0x66, 0x66, 0x7c, 0x66, 0x66, 0xfc, 0x00, 
0x3c, 0x66, 0xc0, 0xc0, 0xc0, 0x66, 0x3c, 0x00,
0xf8, 0x6c, 0x66, 0x66, 0x66, 0x6c, 0xf8, 0x00, 
0xfe, 0x62, 0x68, 0x78, 0x68, 0x62, 0xfe, 0x00,
0xfe, 0x62, 0x68, 0x78, 0x68, 0x60, 0xf0, 0x00, 
0x3c, 0x66, 0xc0, 0xc0, 0xce, 0x66, 0x3e, 0x00,
0x66, 0x66, 0x66, 0x7e, 0x66, 0x66, 0x66, 0x00, 
0x7e, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x00,
0x1e, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78, 0x00, 
0xe6, 0x66, 0x6c, 0x78, 0x6c, 0x66, 0xe6, 0x00,
0xf0, 0x60, 0x60, 0x60, 0x62, 0x66, 0xfe, 0x00, 
0xc6, 0xee, 0xfe, 0xfe, 0xd6, 0xc6, 0xc6, 0x00,
0xc6, 0xe6, 0xf6, 0xde, 0xce, 0xc6, 0xc6, 0x00, 
0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00,
0xfc, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xf0, 0x00, 
0x38, 0x6c, 0xc6, 0xc6, 0xda, 0xcc, 0x76, 0x00,
0xfc, 0x66, 0x66, 0x7c, 0x6c, 0x66, 0xe6, 0x00, 
0x3c, 0x66, 0x60, 0x3c, 0x06, 0x66, 0x3c, 0x00,
0x7e, 0x5a, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 
0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x00,

};

std::wstring    DescribeChar (BYTE byChar)
{
    std::wostringstream str;

    if ((byChar >= 32) && (byChar <= 126))
    {
        str << static_cast<char> (byChar);
    } // Endif.

    else
    {
        str << std::hex << std::setfill(L'0') << std::setw (2) << static_cast<int> (byChar);
    } // Endelse.

    return (str.str ());
}

void    ParseFonts (const Utils::DataList   &fileData,
                    FontList                &fontList,
                    AddressMap              &addressMap)
{
    Font      currentFont;
    FontList  currentFonts;

    for (UINT uiIndex = 0; uiIndex != sizeof (chars); uiIndex += 8)
    {
        currentFont.m_spriteData.insert (currentFont.m_spriteData.begin (), &chars[uiIndex], &chars[uiIndex]+8);
        fontList.push_back (currentFont);

        currentFont.Reset ();
    }

    #ifndef _GRAPHICS_ONLY_
    ::wprintf (L"Font\n");
    ::wprintf (L"====\n");

    for (FontList::const_iterator itr = fontList.begin ();
         itr != fontList.end ();
         ++itr)
    {
        ::wprintf (L"'%s', Address = 0x%04.04x, SpriteData = %s\n",
                    DescribeChar (itr->m_byChar).c_str (),
                    itr->m_wAddress,
                    Utils::DescribeData (itr->m_spriteData).c_str ());
    } // Endfor.
    #else

    int x = 0;
    int y = 16;
    int count = 0;
    for (FontList::const_iterator itr = fontList.begin ();
         itr != fontList.end ();
         ++itr)
    {           
        itr->DisplayFont (1, x, y);

        if (++count > 16)
        {
            x=0;
            y+=16;
            count = 0;
        }
    } // Endfor.

    Font::SaveFonts (1, 0, 16, 17*8, y+16);
    #endif
} // Endproc.

/******************************* End of File *******************************/
